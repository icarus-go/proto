// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: demo/demo.proto

package demo

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDemoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDemoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDemoRequestMultiError, or nil if none found.
func (m *CreateDemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDemoRequestMultiError(errors)
	}

	return nil
}

// CreateDemoRequestMultiError is an error wrapping multiple validation errors
// returned by CreateDemoRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateDemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDemoRequestMultiError) AllErrors() []error { return m }

// CreateDemoRequestValidationError is the validation error returned by
// CreateDemoRequest.Validate if the designated constraints aren't met.
type CreateDemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDemoRequestValidationError) ErrorName() string {
	return "CreateDemoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDemoRequestValidationError{}

// Validate checks the field values on CreateDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDemoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDemoReplyMultiError, or nil if none found.
func (m *CreateDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDemoReplyMultiError(errors)
	}

	return nil
}

// CreateDemoReplyMultiError is an error wrapping multiple validation errors
// returned by CreateDemoReply.ValidateAll() if the designated constraints
// aren't met.
type CreateDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDemoReplyMultiError) AllErrors() []error { return m }

// CreateDemoReplyValidationError is the validation error returned by
// CreateDemoReply.Validate if the designated constraints aren't met.
type CreateDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDemoReplyValidationError) ErrorName() string { return "CreateDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDemoReplyValidationError{}

// Validate checks the field values on UpdateDemoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDemoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDemoRequestMultiError, or nil if none found.
func (m *UpdateDemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDemoRequestMultiError(errors)
	}

	return nil
}

// UpdateDemoRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateDemoRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateDemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDemoRequestMultiError) AllErrors() []error { return m }

// UpdateDemoRequestValidationError is the validation error returned by
// UpdateDemoRequest.Validate if the designated constraints aren't met.
type UpdateDemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDemoRequestValidationError) ErrorName() string {
	return "UpdateDemoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDemoRequestValidationError{}

// Validate checks the field values on UpdateDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDemoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDemoReplyMultiError, or nil if none found.
func (m *UpdateDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDemoReplyMultiError(errors)
	}

	return nil
}

// UpdateDemoReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateDemoReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDemoReplyMultiError) AllErrors() []error { return m }

// UpdateDemoReplyValidationError is the validation error returned by
// UpdateDemoReply.Validate if the designated constraints aren't met.
type UpdateDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDemoReplyValidationError) ErrorName() string { return "UpdateDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDemoReplyValidationError{}

// Validate checks the field values on DeleteDemoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDemoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDemoRequestMultiError, or nil if none found.
func (m *DeleteDemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDemoRequestMultiError(errors)
	}

	return nil
}

// DeleteDemoRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDemoRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDemoRequestMultiError) AllErrors() []error { return m }

// DeleteDemoRequestValidationError is the validation error returned by
// DeleteDemoRequest.Validate if the designated constraints aren't met.
type DeleteDemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDemoRequestValidationError) ErrorName() string {
	return "DeleteDemoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDemoRequestValidationError{}

// Validate checks the field values on DeleteDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDemoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDemoReplyMultiError, or nil if none found.
func (m *DeleteDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDemoReplyMultiError(errors)
	}

	return nil
}

// DeleteDemoReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteDemoReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDemoReplyMultiError) AllErrors() []error { return m }

// DeleteDemoReplyValidationError is the validation error returned by
// DeleteDemoReply.Validate if the designated constraints aren't met.
type DeleteDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDemoReplyValidationError) ErrorName() string { return "DeleteDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDemoReplyValidationError{}

// Validate checks the field values on GetDemoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDemoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDemoRequestMultiError,
// or nil if none found.
func (m *GetDemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDemoRequestMultiError(errors)
	}

	return nil
}

// GetDemoRequestMultiError is an error wrapping multiple validation errors
// returned by GetDemoRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDemoRequestMultiError) AllErrors() []error { return m }

// GetDemoRequestValidationError is the validation error returned by
// GetDemoRequest.Validate if the designated constraints aren't met.
type GetDemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDemoRequestValidationError) ErrorName() string { return "GetDemoRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDemoRequestValidationError{}

// Validate checks the field values on GetDemoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDemoReplyMultiError, or
// nil if none found.
func (m *GetDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDemoReplyMultiError(errors)
	}

	return nil
}

// GetDemoReplyMultiError is an error wrapping multiple validation errors
// returned by GetDemoReply.ValidateAll() if the designated constraints aren't met.
type GetDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDemoReplyMultiError) AllErrors() []error { return m }

// GetDemoReplyValidationError is the validation error returned by
// GetDemoReply.Validate if the designated constraints aren't met.
type GetDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDemoReplyValidationError) ErrorName() string { return "GetDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDemoReplyValidationError{}

// Validate checks the field values on ListDemoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDemoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDemoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDemoRequestMultiError, or nil if none found.
func (m *ListDemoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDemoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDemoRequestMultiError(errors)
	}

	return nil
}

// ListDemoRequestMultiError is an error wrapping multiple validation errors
// returned by ListDemoRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDemoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDemoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDemoRequestMultiError) AllErrors() []error { return m }

// ListDemoRequestValidationError is the validation error returned by
// ListDemoRequest.Validate if the designated constraints aren't met.
type ListDemoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDemoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDemoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDemoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDemoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDemoRequestValidationError) ErrorName() string { return "ListDemoRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDemoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDemoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDemoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDemoRequestValidationError{}

// Validate checks the field values on ListDemoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDemoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDemoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDemoReplyMultiError, or
// nil if none found.
func (m *ListDemoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDemoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDemoReplyMultiError(errors)
	}

	return nil
}

// ListDemoReplyMultiError is an error wrapping multiple validation errors
// returned by ListDemoReply.ValidateAll() if the designated constraints
// aren't met.
type ListDemoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDemoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDemoReplyMultiError) AllErrors() []error { return m }

// ListDemoReplyValidationError is the validation error returned by
// ListDemoReply.Validate if the designated constraints aren't met.
type ListDemoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDemoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDemoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDemoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDemoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDemoReplyValidationError) ErrorName() string { return "ListDemoReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListDemoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDemoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDemoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDemoReplyValidationError{}
